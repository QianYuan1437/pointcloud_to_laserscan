// Generated by gencpp from file qr_msgs/qrResponse.msg
// DO NOT EDIT!


#ifndef QR_MSGS_MESSAGE_QRRESPONSE_H
#define QR_MSGS_MESSAGE_QRRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int8.h>

namespace qr_msgs
{
template <class ContainerAllocator>
struct qrResponse_
{
  typedef qrResponse_<ContainerAllocator> Type;

  qrResponse_()
    : success(false)
    , id()  {
    }
  qrResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::qr_msgs::qrResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qr_msgs::qrResponse_<ContainerAllocator> const> ConstPtr;

}; // struct qrResponse_

typedef ::qr_msgs::qrResponse_<std::allocator<void> > qrResponse;

typedef boost::shared_ptr< ::qr_msgs::qrResponse > qrResponsePtr;
typedef boost::shared_ptr< ::qr_msgs::qrResponse const> qrResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qr_msgs::qrResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qr_msgs::qrResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qr_msgs::qrResponse_<ContainerAllocator1> & lhs, const ::qr_msgs::qrResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qr_msgs::qrResponse_<ContainerAllocator1> & lhs, const ::qr_msgs::qrResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qr_msgs::qrResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qr_msgs::qrResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qr_msgs::qrResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qr_msgs::qrResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qr_msgs::qrResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qr_msgs::qrResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qr_msgs::qrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b74d638021b5ea388d36073cbd682ed5";
  }

  static const char* value(const ::qr_msgs::qrResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb74d638021b5ea38ULL;
  static const uint64_t static_value2 = 0x8d36073cbd682ed5ULL;
};

template<class ContainerAllocator>
struct DataType< ::qr_msgs::qrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qr_msgs/qrResponse";
  }

  static const char* value(const ::qr_msgs::qrResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qr_msgs::qrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success #识别成功才返回true\n"
"std_msgs/Int8 id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
;
  }

  static const char* value(const ::qr_msgs::qrResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qr_msgs::qrResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct qrResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qr_msgs::qrResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qr_msgs::qrResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QR_MSGS_MESSAGE_QRRESPONSE_H
