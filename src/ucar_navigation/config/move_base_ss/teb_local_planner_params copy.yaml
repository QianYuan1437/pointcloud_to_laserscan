TebLocalPlannerROS:

  odom_topic: odom
  map_frame: "modifier_map"

  # Trajectory 轨迹生成策略

  teb_autosize: True # 是否自动调整时间间隔（dt_ref）以匹配轨迹的持续时间。这有助于保持轨迹的平滑性和响应性。  
  dt_ref: 0.4 # 参考时间间隔（秒），用于在优化过程中离散化时间。较小的值可以提高轨迹的平滑性，但会增加计算量。  
  dt_hysteresis: 0.1 # 时间间隔调整时的滞后阈值。这有助于避免时间间隔的频繁变化，增加系统的稳定性。  
  max_samples: 600 # 在轨迹优化过程中考虑的最大样本数。这影响优化问题的规模和计算时间。  
  min_samples: 4 # 在轨迹优化过程中考虑的最小样本数。确保轨迹有足够的分辨率来表示机器人的运动。  
  global_plan_overwrite_orientation: True # 是否允许全局路径覆盖局部规划的初始方向。这有助于在全局路径与局部环境不一致时进行调整。  
  allow_init_with_backwards_motion: False # 是否允许以向后运动初始化轨迹。在某些情况下，向后移动可能是避开障碍物的有效策略，但通常不推荐。  
  max_global_plan_lookahead_dist: 1.0 # 在考虑全局路径时向前查看的最大距离（米）。这有助于确保局部规划器与全局规划器保持一致。  
  global_plan_viapoint_sep: 0.08 # 在将全局路径转换为中间点（via points）时使用的分离距离（米）。这有助于将全局路径分解为更易于处理的段。  
  global_plan_prune_distance: 1 # 修剪全局路径时使用的距离阈值（米）。这有助于去除与当前位置过远且不太可能影响局部规划的部分。  
  exact_arc_length: False # 是否在计算轨迹弧长时使用精确方法。精确方法可能更准确，但计算成本更高。  
  feasibility_check_no_poses: 0 # 在检查轨迹可行性时，连续检查两个姿态之间的可行性。这有助于快速评估轨迹是否可执行。  
  publish_feedback: False # 是否发布有关规划过程的反馈消息。这对于调试和监控规划性能可能很有用。  
  force_reinit_new_goal_dist: 0.25 # 当新目标与当前目标之间的距离超过此阈值时，强制重新初始化局部规划器。这有助于在目标发生较大变化时快速响应。  
  force_reinit_new_goal_angular: 1.2 # 当新目标与当前目标之间的角度差超过此阈值时（弧度），强制重新初始化局部规划器。与距离阈值类似，但用于角度变化。
  
  # Robot 机器人运动学参数
  max_vel_x: 1.2
  acc_lim_x: 2.0
  max_vel_x_backwards: 0.2
  max_vel_y: 1.2
  acc_lim_y: 2.0
  max_vel_theta: 3.0
  acc_lim_theta: 3.0 #0.5
  min_turning_radius: 0.0 # diff-drive robot (can turn on place!)

  footprint_model:
    type: "point"
  # footprint_model/line_start: [0.0,-0.25]
  # footprint_model/line_end: [0.0,0.25]
  # /footprint_model/vertices: [[0.175, 0.14], [0.175, -0.14], [-0.175, -0.14], [-0.175, 0.14]]
  # GoalTolerance 目标位置容忍度

  yaw_goal_tolerance: 0.08 # 目标位置的角度容忍度（弧度）。这定义了机器人到达目标点时允许的最大航向角偏差。注意注释中提到的“-- degrees”可能是一个笔误，因为通常这种参数是以弧度为单位的。0.08弧度大约等于4.57度。  
    
  xy_goal_tolerance: 0.08 # 目标位置的位置容忍度（米）。这定义了机器人到达目标点时允许的最大位置偏差。在这个例子中，0.08米大约等于8.5厘米，因此注释中的“8.5 cm”是正确的。  
    
  free_goal_vel: False # 是否允许目标点具有自由速度。如果设置为True，则允许局部规划器在到达目标点时具有非零速度。这通常不是推荐的做法，因为它可能导致机器人在到达目标点后继续移动。  
    
  complete_global_plan: True # 是否要求局部规划器完全遵循全局路径。如果设置为True，局部规划器将尝试尽可能紧密地跟随全局路径，即使这意味着在某些情况下可能不是最优的局部决策。这有助于确保全局路径和局部路径之间的一致性。然而，在某些情况下，允许局部规划器有一定的自由度可能会产生更好的结果。
        
  # Obstacles 障碍物参数

  min_obstacle_dist: 0.14 # This value must also include our robot radius, since footprint_model is set to "point".与障碍物的最小距离
  inflation_dist: 0.155 #0.15，障碍取膨胀距离
  include_costmap_obstacles: True
  costmap_obstacles_behind_robot_dist: 1.0 #1.5 #身后多远的距离加入检测范围
  obstacle_poses_affected: 15 #障碍物对附近多少个关节点有影响

  dynamic_obstacle_inflation_dist: 0.25 #0.25
  include_dynamic_obstacles: True

  # costmap_converter_plugin: ""
  # costmap_converter_spin_thread: True
  # costmap_converter_rate: 5

  # Optimization 优化参数

  no_inner_iterations: 5 # 在每次外部迭代中执行的内部优化迭代次数。较高的值可以提高优化精度，但会增加计算时间。  
  no_outer_iterations: 4 # 执行的总外部优化迭代次数。这决定了优化过程的总长度。  
  optimization_activate: True # 是否激活轨迹优化过程。启用后，TEB算法将尝试找到最优轨迹。  
  optimization_verbose: False # 是否在优化过程中输出详细日志。对于调试有用，但在生产环境中可能会产生大量输出。  
  penalty_epsilon: 0.1 # 用于处理约束违反的惩罚项的阈值。低于此阈值的约束违反不会被严重惩罚。  
  obstacle_cost_exponent: 4 # 障碍物成本的指数。较高的值会使算法更加避开障碍物，但也可能导致过于保守的路径。  
  weight_max_vel_x: 1.0 # 线性速度上限的权重。调整此参数可以影响机器人沿x轴的最大速度。  
  weight_max_vel_y: 1.0
  weight_max_vel_theta: 1.0 # 角速度上限的权重。调整此参数可以影响机器人的转向速率。  
  weight_acc_lim_x: 1 # 线性加速度限制的权重。调整此参数可以影响机器人沿x轴的加速度。
  weight_acc_lim_y: 1.0  
  weight_acc_lim_theta: 1 # 角加速度限制的权重。调整此参数可以影响机器人的角加速度。  
  weight_kinematics_nh: 10 # 非完整约束（nonholonomic constraint）的权重。这有助于确保生成的轨迹符合机器人的运动学特性。  
  weight_kinematics_forward_drive: 1000 # 向前驱动偏好的权重。增加此值会使机器人更倾向于沿直线前进，而不是频繁转向。  
  weight_kinematics_turning_radius: 0 # 转弯半径约束的权重。调整此参数可以影响机器人转弯时的平滑度。  
  weight_optimaltime: 1 # 轨迹最优时间的权重。必须大于0，较高的值会使算法优先考虑时间效率。  
  weight_shortest_path: 0 # 最短路径的权重。通常设置为0，因为TEB算法已经内置了优化路径长度的机制。  
  weight_obstacle: 100 # 障碍物成本的权重。较高的值会使算法更加避开障碍物。  
  weight_inflation: 0.2 # 障碍物膨胀的权重。这影响障碍物周围的安全区域大小。  
  weight_dynamic_obstacle: 10 # 动态障碍物成本的权重。与静态障碍物类似，但用于动态环境中的移动障碍物。  
  weight_dynamic_obstacle_inflation: 0.2 # 动态障碍物膨胀的权重。与静态障碍物膨胀类似，但适用于动态障碍物。  
  weight_viapoint: 1 # 中间点（via point）的权重。增加此值会使算法更倾向于通过指定的中间点。  
  weight_adapt_factor: 2 # 自适应因子的权重。这用于动态调整其他权重的比例，以适应不同的规划场景。

  # Homotopy Class Planner 多线规划参数
  
  enable_homotopy_class_planning: False  # 是否启用同伦类规划。同伦类规划是一种生成多条候选路径（每个路径属于不同的同伦类）的方法，然后从中选择最优路径。这有助于在复杂环境中找到更好的解决方案。  
  enable_multithreading: True  # 是否在多线程模式下运行同伦类规划。启用多线程可以加速计算过程，特别是在生成多条候选路径时。  
  max_number_classes: 2  # 在同伦类规划中生成的最大候选路径数量。这个数量限制了算法尝试的不同路径方案的数量。  
  selection_cost_hysteresis: 1.0  # 选择最优路径时的成本滞后阈值。这用于避免在路径成本相近时频繁切换路径，增加系统的稳定性。  
  selection_prefer_initial_plan: 0.9  # 在选择路径时，对初始路径的偏好程度（0到1之间）。较高的值会使算法更倾向于选择接近初始路径的方案。  
  selection_obst_cost_scale: 100.0  # 障碍物成本的缩放因子。这影响障碍物在路径选择中的重要性。较高的值会使算法更加避开障碍物。  
  selection_alternative_time_cost: False  # 是否在选择替代路径时考虑时间成本。如果启用，算法可能会选择时间更短但可能更冒险的路径。  
  roadmap_graph_no_samples: 20  # 在构建同伦类图时，每个区域内采样的点数。这些点用于生成候选路径。  
  roadmap_graph_area_width: 4  # 同伦类图构建时，每个区域的宽度（单位依赖于地图坐标系统）。这定义了采样区域的大小。  
  roadmap_graph_area_length_scale: 1.0  # 同伦类图构建时，区域长度的缩放因子。这允许根据路径的预期长度调整采样区域的大小。  
  h_signature_prescaler: 1.0  # 同伦签名预缩放因子。同伦签名用于区分不同的路径类。预缩放可以影响签名的敏感度和区分度。  
  h_signature_threshold: 0.1  # 同伦签名的阈值，用于确定两条路径是否属于同一同伦类。低于此阈值的签名差异可能被认为是相同的路径类。  
  obstacle_heading_threshold: 1.0 # 障碍物朝向阈值（以弧度为单位）。这用于确定障碍物是否对路径选择有显著影响，特别是在考虑障碍物如何影响路径方向时。  
  switching_blocking_period: 0.0  # 切换阻塞周期。在某些实现中，这可能用于防止在特定时间内频繁切换路径，增加系统的稳定性。值为0表示没有阻塞周期。  
  viapoints_all_candidates: True  # 是否在所有候选路径中都考虑中间点（via points）。如果启用，算法会尝试在所有生成的候选路径中通过中间点。  
  delete_detours_backwards: True  # 是否向后删除绕路。这有助于清理生成的路径，去除不必要的绕行，使路径更加直接。  
  max_ratio_detours_duration_best_duration: 3.0  # 允许的最长绕行时间与最佳路径时间的最大比率。这用于限制绕行的长度，确保生成的路径在合理范围内。  
  visualize_hc_graph: False  # 是否可视化同伦类图。这有助于调试和理解算法如何生成候选路径。  
  visualize_with_time_as_z_axis_scale: False  # 是否在可视化时将时间作为Z轴缩放。这可以用于生成三维可视化，其中时间作为第三个维度显示路径随时间的变化。

# Recovery 相关参数  
  
  shrink_horizon_backup: True  # 是否启用缩小规划视野（horizon）的备份策略。当检测到振荡时，此策略会尝试通过减少规划的前瞻距离（即视野范围）来减少振荡，帮助机器人更快地恢复稳定。  
  
  shrink_horizon_min_duration: 4  # 启用缩小规划视野策略后，保持缩小视野状态的最小持续时间（单位通常为秒）。这有助于确保策略有足够的时间生效，而不是频繁地切换视野大小。  
  
  oscillation_recovery: True  # 是否启用振荡恢复机制。当检测到机器人运动出现振荡时，此机制会尝试通过调整路径规划参数来减少或消除振荡。  
  
  oscillation_v_eps: 0.1  # 线性速度振荡的阈值（单位依赖于速度的单位，通常是m/s）。当检测到机器人的线性速度变化超过此阈值时，可能认为存在振荡。  
  
  oscillation_omega_eps: 0.1  # 角速度振荡的阈值（单位依赖于角速度的单位，通常是rad/s）。与`oscillation_v_eps`类似，但用于检测角速度的振荡。  
  
  oscillation_recovery_min_duration: 5  # 振荡恢复策略尝试调整参数并观察效果的最小持续时间（单位通常为秒）。这有助于确保策略有足够的时间来评估其效果，并避免频繁地更改参数。  
  
  oscillation_filter_duration: 5  # 振荡检测中的滤波持续时间（单位通常为秒）。此参数用于平滑或滤波速度数据，以减少噪声对振荡检测的影响。较长的滤波时间可以减少误报，但也可能导致对真实振荡的响应延迟。
