obstacle_range: 6.0 #3.5 #代价地图中机器人能够检测到的障碍物的最大距离
raytrace_range: 6.0 #2.5 #计算代价地图时机器人用于检测障碍物的激光雷达扫描线的最大长度
# footprint: [[0.175, 0.14], [0.175, -0.14], [-0.175, -0.14], [-0.175, 0.14]] #机器人的底部轮廓，用于计算机器人与障碍物之间的距离
footprint: [[0.175, 0.13], [0.175, -0.13], [-0.175, -0.13], [-0.175, 0.13]] #机器人的底部轮廓，用于计算机器人与障碍物之间的距离
#footprint_inflation: 0.01
# robot_radius: 0.175

# map_type: costmap 
#transform_tolerance: 1
obstacle_layer:
  observation_sources: scan
  scan: {data_type: LaserScan,
    topic: /scan,
    marking: true,
    clearing: true,
    obstacle_range: 4.0,
    raytrace_range: 4.0,
    max_obstacle_height: 2.0,
    min_obstacle_height: 0.0,
    inf_is_valid: True}

# plugins:
#   - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
#   - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
# 全局膨胀层参数配置
# global_inflation_layer:
#   enabled: true # 是否使能全局膨胀层；
#   cost_scaling_factor: 10.0 # 膨胀层的指数衰减速度，值越小衰减越慢(default: 10)；
#   inflation_radius: 0.145 # 全局最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。

# local_inflation_layer:
#   enabled: true # 是否使能局部膨胀层；
#   cost_scaling_factor: 10.0 # 膨胀层的指数衰减速度，值越小衰减越慢(default: 10)；
#   inflation_radius: 0.145 # 局部最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。

# 静态层参数配置
static_layer:
  map_topic: map # 静态地图话题
  enabled: true # 是否使用静态层

#恢复行为
recover_behavious:
    - name: 'rotate_recovery'
      type: 'rotate_recovery/RotateRecovery' 
    - name: 'clear_costmap_recovery'
      type: 'clear_costmap_recovery/ClearCostmapRecovery'

clear_costmap_recovery:
    reset_distance: 0.1
    layer_names: ['obstacle_layer','costmap_prohibition_layer']